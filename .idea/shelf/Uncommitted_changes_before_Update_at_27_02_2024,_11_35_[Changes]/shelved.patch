Index: src/test/java/hexlet/code/controller/TaskControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package hexlet.code.controller;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport hexlet.code.dto.task.TaskCreateDTO;\nimport hexlet.code.dto.task.TaskUpdateDTO;\nimport hexlet.code.model.Label;\nimport hexlet.code.model.Task;\nimport hexlet.code.model.TaskStatus;\nimport hexlet.code.model.User;\nimport hexlet.code.repository.LabelRepository;\nimport hexlet.code.repository.TaskRepository;\nimport hexlet.code.repository.TaskStatusRepository;\nimport hexlet.code.repository.UserRepository;\nimport hexlet.code.util.EntityGenerator;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.jackson.nullable.JsonNullable;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.JwtRequestPostProcessor;\nimport org.springframework.test.web.servlet.MockMvc;\n\nimport java.util.Set;\nimport java.util.logging.Logger;\n\nimport static net.javacrumbs.jsonunit.assertj.JsonAssertions.assertThatJson;\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@SpringBootTest\n@AutoConfigureMockMvc\npublic class TaskControllerTest {\n\n    @Autowired\n    private static final Logger logger = Logger.getLogger(String.valueOf(TaskControllerTest.class));\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Autowired\n    private ObjectMapper om;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private TaskStatusRepository taskStatusRepository;\n\n    @Autowired\n    private LabelRepository labelRepository;\n\n    @Autowired\n    private TaskRepository taskRepository;\n\n    @Autowired\n    private EntityGenerator entityGenerator;\n\n    private User testUser;\n\n    private TaskStatus testTaskStatus;\n\n    private Label testLabel;\n\n    private Task testTask;\n\n    private JwtRequestPostProcessor token;\n\n    @BeforeEach\n    public void setUp() {\n        testUser = entityGenerator.generateUser();\n        userRepository.save(testUser);\n        testTaskStatus = entityGenerator.generateTaskStatus();\n        taskStatusRepository.save(testTaskStatus);\n        testLabel = entityGenerator.generateLabel();\n        labelRepository.save(testLabel);\n        testTask = entityGenerator.generateTask();\n        testTask.setAssignee(testUser);\n        testTask.setTaskStatus(testTaskStatus);\n        testTask.setLabels(Set.of(testLabel));\n        taskRepository.save(testTask);\n        token = jwt().jwt(builder -> builder.subject(testUser.getEmail()));\n    }\n\n    @AfterEach\n    public void clean() {\n        taskRepository.deleteAll();\n        taskStatusRepository.deleteAll();\n        labelRepository.deleteAll();\n        userRepository.deleteAll();\n    }\n\n    @Test\n    public void testGetList() throws Exception {\n        var request = get(\"/api/tasks\")\n                .with(token);\n        var result = mockMvc.perform(request)\n                .andExpect(status().isOk())\n                .andReturn();\n        var body = result.getResponse().getContentAsString();\n        assertThatJson(body).isArray().hasSize(1);\n    }\n\n    @Test\n    public void testGetListWithParams() throws Exception {\n        var request = get(\"/api/tasks?\"\n                + \"titleCont=\" + \"Name\"\n                + \"&assigneeId=\" + 123\n                + \"&status=\" + \"Slug\"\n                + \"&labelId=\" + 123)\n                .with(token);\n        var result = mockMvc.perform(request)\n                .andExpect(status().isOk())\n                .andReturn();\n        var body = result.getResponse().getContentAsString();\n        assertThatJson(body).isArray().hasSize(1);\n    }\n\n    @Test\n    public void testShow() throws Exception {\n        var request = get(\"/api/tasks/\" + testTask.getId())\n                .with(token);\n        var result = mockMvc.perform(request)\n                .andExpect(status().isOk())\n                .andReturn();\n        var body = result.getResponse().getContentAsString();\n        assertThatJson(body).and(\n                a -> a.node(\"id\").isEqualTo(testTask.getId()),\n                a -> a.node(\"title\").isEqualTo(testTask.getName()),\n                a -> a.node(\"index\").isEqualTo(testTask.getIndex()),\n                a -> a.node(\"content\").isEqualTo(testTask.getDescription()),\n                a -> a.node(\"status\").isEqualTo(testTaskStatus.getSlug()),\n                a -> a.node(\"assignee_id\").isEqualTo(testUser.getId()),\n                a -> a.node(\"taskLabelIds\").isEqualTo(Set.of(testLabel.getId()))\n        );\n    }\n\n    @Test\n    public void testCreate() throws Exception {\n        var newUser = entityGenerator.generateUser();\n        userRepository.save(newUser);\n        var newTaskStatus = entityGenerator.generateTaskStatus();\n        taskStatusRepository.save(newTaskStatus);\n        var newLabel = entityGenerator.generateLabel();\n        labelRepository.save(newLabel);\n        var newTask = entityGenerator.generateTask();\n        var data = new TaskCreateDTO();\n        data.setTitle(newTask.getName());\n        data.setIndex(newTask.getIndex());\n        data.setContent(newTask.getDescription());\n        data.setStatus(newTaskStatus.getSlug());\n        data.setAssigneeId(newUser.getId());\n        data.setTaskLabelIds(Set.of(newLabel.getId()));\n        var request = post(\"/api/tasks\")\n                .with(token)\n                .contentType(MediaType.APPLICATION_JSON)\n                .content(om.writeValueAsString(data));\n\n        mockMvc.perform(request)\n                .andExpect(status().isCreated());\n\n        var task = taskRepository.findByName(newTask.getName()).get();\n        assertNotNull(task);\n        assertThat(task.getIndex()).isEqualTo(newTask.getIndex());\n        assertThat(task.getDescription()).isEqualTo(newTask.getDescription());\n    }\n\n    @Test\n    public void testUpdate() throws Exception {\n        var data = new TaskUpdateDTO();\n        data.setTitle(JsonNullable.of(\"New title\"));\n        data.setIndex(JsonNullable.of(2023));\n        data.setContent(JsonNullable.of(\"New content\"));\n\n        ObjectMapper objectMapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);\n        String prettyJson = objectMapper.writeValueAsString(data);\n        logger.info(\"JSON Request: \" + prettyJson);\n        var request = put(\"/api/tasks/\" + testTask.getId())\n                .with(token)\n                .contentType(MediaType.APPLICATION_JSON)\n                .content(om.writeValueAsString(data));\n        mockMvc.perform(request)\n                .andExpect(status().isOk());\n        var task = taskRepository.findById(testTask.getId()).get();\n        assertThat(task.getName()).isEqualTo(\"New title\");\n        assertThat(task.getIndex()).isEqualTo(2023);\n        assertThat(task.getDescription()).isEqualTo(\"New content\");\n\n    }\n\n    @Test\n    public void testDelete() throws Exception {\n        var request = delete(\"/api/tasks/\" + testTask.getId())\n                .with(token);\n        mockMvc.perform(request)\n                .andExpect(status().isNoContent());\n        assertThat(taskRepository.existsById(testTask.getId())).isFalse();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/hexlet/code/controller/TaskControllerTest.java b/src/test/java/hexlet/code/controller/TaskControllerTest.java
--- a/src/test/java/hexlet/code/controller/TaskControllerTest.java	(revision 843c81c6661d752328b7d3768b65ad11cbf507f0)
+++ b/src/test/java/hexlet/code/controller/TaskControllerTest.java	(date 1709011639791)
@@ -1,7 +1,6 @@
 package hexlet.code.controller;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.databind.SerializationFeature;
 import hexlet.code.dto.task.TaskCreateDTO;
 import hexlet.code.dto.task.TaskUpdateDTO;
 import hexlet.code.model.Label;
@@ -25,7 +24,6 @@
 import org.springframework.test.web.servlet.MockMvc;
 
 import java.util.Set;
-import java.util.logging.Logger;
 
 import static net.javacrumbs.jsonunit.assertj.JsonAssertions.assertThatJson;
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
@@ -41,8 +39,6 @@
 @AutoConfigureMockMvc
 public class TaskControllerTest {
 
-    @Autowired
-    private static final Logger logger = Logger.getLogger(String.valueOf(TaskControllerTest.class));
     @Autowired
     private MockMvc mockMvc;
 
@@ -180,9 +176,6 @@
         data.setIndex(JsonNullable.of(2023));
         data.setContent(JsonNullable.of("New content"));
 
-        ObjectMapper objectMapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT);
-        String prettyJson = objectMapper.writeValueAsString(data);
-        logger.info("JSON Request: " + prettyJson);
         var request = put("/api/tasks/" + testTask.getId())
                 .with(token)
                 .contentType(MediaType.APPLICATION_JSON)
